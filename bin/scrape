#!/usr/bin/env php
<?php

namespace Rake;

use Lemmon\Router\Router;
use Symfony\Component\Yaml\Yaml;

//
// options
$optin = getopt('bd:h', ['help', 'build', 'build-only', 'env:']);
$options = [
    'scrape' => TRUE,
    'build' => FALSE,
    'env' => NULL,
];

//
// dir
if (isset($optin['d'])) {
    $base = realpath(('/' == $optin['d']{0} ? '' : getcwd() . '/') . $optin['d']);
} else {
    $base = getcwd();
}

require $base . '/bootstrap.php';

if (isset($optin['h']) or isset($optin['help'])) {
    __displayHelp();
    exit(1);
} else {
    if (isset($optin['b']) or isset($optin['build'])) $options['build'] = TRUE;
    if (isset($optin['build-only'])) $options = array_replace($options, ['scrape' => FALSE, 'build' => TRUE]);
    if (isset($optin['env'])) $options['env'] = $optin['env'];
    __scrape($options);
}

//
// help
function __displayHelp()
{
    echo "\033[0;33mUsage:", PHP_EOL;
    echo "\033[0;37m  command [options]", PHP_EOL;
    echo PHP_EOL;
    echo "\033[0;33mOptions:", PHP_EOL;
    echo "\033[0;32m  -h, --help\033[0;37m     Display this help message", PHP_EOL;
    echo "\033[0;32m  -b, --build\033[0;37m    Build static html files", PHP_EOL;
    echo "\033[0;32m  -d <dir>\033[0;37m       Specify working directory", PHP_EOL;
    echo "\033[0;37m";
}

//
// scrape
function __scrape(array $o = [])
{
    $t = -microtime(TRUE);
    $site = [];
    $root = BASE_DIR;
    
    if ($o['scrape']) {
        // go through locales
        foreach (glob($root . '/content/*') as $i => $item) {
            $i = 0;
            $base = basename($item);
            $locale_id = preg('/[a-z]+(_\w+)?/i', $base)[0];
            if ('_' == $base{0} or !is_dir($item)) {
                continue;
            }
            $site['l10n'][$locale_id] = $locale = [
                'id'      => $locale_id,
                'dir'     => $base,
                'active'  => !('_' == $base{0}),
                'primary' => !(bool)$i,
            ];
            echo "\033[0;33mLocale:\033[0;37m " . $locale_id, PHP_EOL;
            // go through files
            __tree($item, function($file, $link, $ns) use (&$site, $locale, $root, &$i, $o) {
                $path = '/' . ($i ? $link : '');
                $type = $ns ?? '@pages';
                $data = __data($file);
                $locale_id = strtolower(strtr($locale['id'], ['_' => '-']));
                echo " \033[1;30m-\033[0;37m " . $link . ($ns ? " \033[1;30m(\033[0;32m{$ns}\033[1;30m)\033[0;37m" : '') . PHP_EOL;
                $site['tree'][$locale_id][$link] = $path;
                $site['data'][$link] = [
                    'l10n' => $locale['id'],
                    'link' => $link,
                    'path' => $i ? $link . '.html' : '',
                    'name' => ucwords(strtr(preg_replace('/^(\d+_)?([^\.]+)\..*$/', '$2', basename($file)), ['_' => ' '])),
                    'file' => substr($file, strlen($root) + 1),
                    'time' => filemtime($file),
                    'data' => $data,
                    'type' => $type,
                ];
                $site[$type][$locale_id][] = $path;
                $i++;
            });
        }
        // save results
        if (!is_dir($_ = BASE_DIR . '/build')) {
            mkdir($_, 0755, TRUE);
        }
        file_put_contents(BASE_DIR . '/build/site.json', json_encode($site, JSON_PRETTY_PRINT));
    } else {
        $site = json_decode(file_get_contents(BASE_DIR . '/build/site.json'), TRUE);
    }
    
    // build static files
    if ($o['build']) {
        // environment
        $env = $o['env'] ?? 'default';
        // dist dir
        $base = BASE_DIR . '/dist/';
        if (!is_dir($base)) {
            mkdir($base, 0755, TRUE);
        }
        // site
        $_site = new Site($env, [
            'router' => [
                'root' => FALSE,
                'base' => './',
            ],
        ], time());
        // iterate
        foreach ($site['tree'] as $locale_id => $pages) {
            echo "\033[0;33mBuilding:\033[0;37m " . $locale_id, PHP_EOL;
            foreach ($pages as $link => $path) {
                $item = $site['data'][$link];
                $file = $base . $link . '.html';
                // verbose
                echo " \033[1;30m-\033[0;37m " . $link;
                if ('@pages' != $item['type']) {
                    echo " \033[1;30m(\033[0;32m" .$item['type']. "\033[1;30m)\033[0;37m";
                }
                echo PHP_EOL;
                // prepare directory
                if (!is_dir($_dir = dirname($file))) {
                    mkdir($_dir, 0755, TRUE);
                }
                // dispatch page
                $_site->dispatch(function ($s, $p) use ($file) {
                    file_put_contents($file, $p->render(['cache' => FALSE]));
                }, [
                    'router' => ['path' => $item['path']],
                ]);
            }
        }
    }

    // notice
    echo "\033[0;32mScrape okay \033[1;30m(took " .round((microtime(TRUE) + $t) * 1000, 2). "ms)\033[1;37m" . PHP_EOL;
}

// travest pages
function __tree($dir, $callback, $level = [], $ns = NULL) {
    $l = strlen($dir) + 1;
    $i = 0;
    $bl = strlen(BASE_DIR);
    $glob = glob($dir . '/*', GLOB_NOSORT);
    usort($glob, function ($a, $b) {
        $a = basename($a);
        $b = basename($b);
        if ('@' == $a{0} and '@' != $b{0}) return +1;
        if ('@' == $b{0} and '@' != $a{0}) return -1;
        return strcmp($a, $b);
    });
    foreach ($glob as $file) {
        $name = basename($file);
        if ('_' === $name{0}) {
            continue;
        }
        if ('@' != $name{0}) {
            preg_match('/^(?:(\d{1,3})_)?([^\.]+)(?:\.(\w+))?/', $name, $m);
            $slug = strtolower(strtr($m[2], '_', '-'));
            if (is_dir($file)) {
                __tree($file, $callback, array_merge($level, [$slug]), $ns);
            } else {
                $type = strtolower($m[3]);
                if ('txt' === $type) {
                    $file_final = file_exists($_ = BASE_DIR . '/' . preg_replace('#^[^/]+#', 'local', substr($file, $bl + 1))) ? $_ : $file;
                    $callback($file_final, join(($i or $ns or empty($level)) ? array_merge($level, [$slug]) : $level, '/'), $ns);
                } else {
                    continue;
                }
            }
            $i++;
        } else {
            $slug = substr($name, 1);
            __tree($file, $callback, $level, $name);
        }
    }
}

// parse data from page
function __data($file) {
    $data = file_get_contents($file);
    $data = @preg('/\-\-\-\s+(.*)\-\-\-/suU', $data)[1];
    $data = Yaml::parse($data) ?: [];
    unset($data['number']);
    return $data;
}
